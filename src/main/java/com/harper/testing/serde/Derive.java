/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.harper.testing.serde;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Derive extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1289267132250312919L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Derive\",\"namespace\":\"com.harper.testing.serde\",\"fields\":[{\"name\":\"f1\",\"type\":[\"int\"]},{\"name\":\"f1_2\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Base\",\"fields\":[{\"name\":\"f1\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"f2\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"f9\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"f2\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Derive> ENCODER =
      new BinaryMessageEncoder<Derive>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Derive> DECODER =
      new BinaryMessageDecoder<Derive>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Derive> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Derive> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Derive>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Derive to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Derive from a ByteBuffer. */
  public static Derive fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Object f1;
  @Deprecated public com.harper.testing.serde.Base f1_2;
  @Deprecated public java.lang.CharSequence f2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Derive() {}

  /**
   * All-args constructor.
   * @param f1 The new value for f1
   * @param f1_2 The new value for f1_2
   * @param f2 The new value for f2
   */
  public Derive(java.lang.Object f1, com.harper.testing.serde.Base f1_2, java.lang.CharSequence f2) {
    this.f1 = f1;
    this.f1_2 = f1_2;
    this.f2 = f2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return f1;
    case 1: return f1_2;
    case 2: return f2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: f1 = (java.lang.Object)value$; break;
    case 1: f1_2 = (com.harper.testing.serde.Base)value$; break;
    case 2: f2 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'f1' field.
   * @return The value of the 'f1' field.
   */
  public java.lang.Object getF1() {
    return f1;
  }

  /**
   * Sets the value of the 'f1' field.
   * @param value the value to set.
   */
  public void setF1(java.lang.Object value) {
    this.f1 = value;
  }

  /**
   * Gets the value of the 'f1_2' field.
   * @return The value of the 'f1_2' field.
   */
  public com.harper.testing.serde.Base getF12() {
    return f1_2;
  }

  /**
   * Sets the value of the 'f1_2' field.
   * @param value the value to set.
   */
  public void setF12(com.harper.testing.serde.Base value) {
    this.f1_2 = value;
  }

  /**
   * Gets the value of the 'f2' field.
   * @return The value of the 'f2' field.
   */
  public java.lang.CharSequence getF2() {
    return f2;
  }

  /**
   * Sets the value of the 'f2' field.
   * @param value the value to set.
   */
  public void setF2(java.lang.CharSequence value) {
    this.f2 = value;
  }

  /**
   * Creates a new Derive RecordBuilder.
   * @return A new Derive RecordBuilder
   */
  public static com.harper.testing.serde.Derive.Builder newBuilder() {
    return new com.harper.testing.serde.Derive.Builder();
  }

  /**
   * Creates a new Derive RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Derive RecordBuilder
   */
  public static com.harper.testing.serde.Derive.Builder newBuilder(com.harper.testing.serde.Derive.Builder other) {
    return new com.harper.testing.serde.Derive.Builder(other);
  }

  /**
   * Creates a new Derive RecordBuilder by copying an existing Derive instance.
   * @param other The existing instance to copy.
   * @return A new Derive RecordBuilder
   */
  public static com.harper.testing.serde.Derive.Builder newBuilder(com.harper.testing.serde.Derive other) {
    return new com.harper.testing.serde.Derive.Builder(other);
  }

  /**
   * RecordBuilder for Derive instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Derive>
    implements org.apache.avro.data.RecordBuilder<Derive> {

    private java.lang.Object f1;
    private com.harper.testing.serde.Base f1_2;
    private com.harper.testing.serde.Base.Builder f1_2Builder;
    private java.lang.CharSequence f2;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.harper.testing.serde.Derive.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.f1_2)) {
        this.f1_2 = data().deepCopy(fields()[1].schema(), other.f1_2);
        fieldSetFlags()[1] = true;
      }
      if (other.hasF12Builder()) {
        this.f1_2Builder = com.harper.testing.serde.Base.newBuilder(other.getF12Builder());
      }
      if (isValidValue(fields()[2], other.f2)) {
        this.f2 = data().deepCopy(fields()[2].schema(), other.f2);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Derive instance
     * @param other The existing instance to copy.
     */
    private Builder(com.harper.testing.serde.Derive other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.f1_2)) {
        this.f1_2 = data().deepCopy(fields()[1].schema(), other.f1_2);
        fieldSetFlags()[1] = true;
      }
      this.f1_2Builder = null;
      if (isValidValue(fields()[2], other.f2)) {
        this.f2 = data().deepCopy(fields()[2].schema(), other.f2);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'f1' field.
      * @return The value.
      */
    public java.lang.Object getF1() {
      return f1;
    }

    /**
      * Sets the value of the 'f1' field.
      * @param value The value of 'f1'.
      * @return This builder.
      */
    public com.harper.testing.serde.Derive.Builder setF1(java.lang.Object value) {
      validate(fields()[0], value);
      this.f1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'f1' field has been set.
      * @return True if the 'f1' field has been set, false otherwise.
      */
    public boolean hasF1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'f1' field.
      * @return This builder.
      */
    public com.harper.testing.serde.Derive.Builder clearF1() {
      f1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'f1_2' field.
      * @return The value.
      */
    public com.harper.testing.serde.Base getF12() {
      return f1_2;
    }

    /**
      * Sets the value of the 'f1_2' field.
      * @param value The value of 'f1_2'.
      * @return This builder.
      */
    public com.harper.testing.serde.Derive.Builder setF12(com.harper.testing.serde.Base value) {
      validate(fields()[1], value);
      this.f1_2Builder = null;
      this.f1_2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'f1_2' field has been set.
      * @return True if the 'f1_2' field has been set, false otherwise.
      */
    public boolean hasF12() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'f1_2' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.harper.testing.serde.Base.Builder getF12Builder() {
      if (f1_2Builder == null) {
        if (hasF12()) {
          setF12Builder(com.harper.testing.serde.Base.newBuilder(f1_2));
        } else {
          setF12Builder(com.harper.testing.serde.Base.newBuilder());
        }
      }
      return f1_2Builder;
    }

    /**
     * Sets the Builder instance for the 'f1_2' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.harper.testing.serde.Derive.Builder setF12Builder(com.harper.testing.serde.Base.Builder value) {
      clearF12();
      f1_2Builder = value;
      return this;
    }

    /**
     * Checks whether the 'f1_2' field has an active Builder instance
     * @return True if the 'f1_2' field has an active Builder instance
     */
    public boolean hasF12Builder() {
      return f1_2Builder != null;
    }

    /**
      * Clears the value of the 'f1_2' field.
      * @return This builder.
      */
    public com.harper.testing.serde.Derive.Builder clearF12() {
      f1_2 = null;
      f1_2Builder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'f2' field.
      * @return The value.
      */
    public java.lang.CharSequence getF2() {
      return f2;
    }

    /**
      * Sets the value of the 'f2' field.
      * @param value The value of 'f2'.
      * @return This builder.
      */
    public com.harper.testing.serde.Derive.Builder setF2(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.f2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'f2' field has been set.
      * @return True if the 'f2' field has been set, false otherwise.
      */
    public boolean hasF2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'f2' field.
      * @return This builder.
      */
    public com.harper.testing.serde.Derive.Builder clearF2() {
      f2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Derive build() {
      try {
        Derive record = new Derive();
        record.f1 = fieldSetFlags()[0] ? this.f1 : (java.lang.Object) defaultValue(fields()[0]);
        if (f1_2Builder != null) {
          record.f1_2 = this.f1_2Builder.build();
        } else {
          record.f1_2 = fieldSetFlags()[1] ? this.f1_2 : (com.harper.testing.serde.Base) defaultValue(fields()[1]);
        }
        record.f2 = fieldSetFlags()[2] ? this.f2 : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Derive>
    WRITER$ = (org.apache.avro.io.DatumWriter<Derive>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Derive>
    READER$ = (org.apache.avro.io.DatumReader<Derive>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
